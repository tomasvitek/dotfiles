# Bash functions

## macOS

finder() {
    if [[ $1 == "hide" ]]; then
        defaults write com.apple.finder AppleShowAllFiles NO && killall Finder
    else
        defaults write com.apple.finder AppleShowAllFiles YES && killall Finder
    fi
}

# Hide and show hidden files on Mac
fileshow() {
  sudo chflags nohidden ${@}
}
filehide() {
  sudo chflags hidden ${@}
}

# Mount and eject drive with Pictures 
# (also creates symlinks in Dropbox)
DRIVE_NAME=Tomik\ Pictures
DRIVE_PATH="/Volumes/$DRIVE_NAME/"

mountpics() {
	if diskutil info "$DRIVE_NAME" | grep -q 'Could not find disk:'; then
		echo "Drive not plugged in!"
	else
		# Mount the drive
		diskutil mount "$DRIVE_NAME"

		# Create symlinks
		if [ -d "$DRIVE_PATH" ]; then
			cd ~/Dropbox/Pictures
			ln -s "$DRIVE_PATH" ./Archive

			cd ~/Pictures
			ln -s ~/Dropbox/Pictures/Archive ./Archive

			echo "Drive mounted!"
		else
			echo "Couldn't mount the drive!"
		fi
	fi
}

ejectpics() {
	if diskutil info "$DRIVE_NAME" | grep -q 'Could not find disk:'; then
		echo "Drive not plugged in!"
	else
		# Eject the drive
		diskutil eject "$DRIVE_NAME"

		# Remove all symlinks
		if [ ! -d "$DRIVE_PATH" ]; then
			cd ~/Dropbox/Pictures
			rm ./Archive

			cd ~/Pictures
			em ./Archive

			echo "Drive ejected!"
		else
			echo "Couldn't eject the drive!"
		fi
	fi
}

# Launch a text editor
edit() {
    if [ "$#" -eq 0 ]; then
      subl .
    else
      subl ${@}
    fi
}

## Utils

function killport() {
  lsof -i TCP:$1 | grep LISTEN | awk '{print $2}' | xargs kill -9
}

# Removes a symlink and replaces it with the original file
function unlink() {
  if [ ! -L "$1" ]; then
    echo "Please provide a symlink."
  else
    ORIGINAL=$(readlink "$1")
    if [ -f "$ORIGINAL" ]; then
      rm "$1"
      cp "$ORIGINAL" "$1"
      echo "Replaced by: $ORIGINAL"
    else
      echo "Error when reading: $ORIGINAL"
    fi
  fi
}

# Replaces all symlinks in the directory with their original files
function unlinkdir() {
  if [ ! -d "$1" ]; then
    echo "Please provide a directory."
  else
    output=$(find $1 -type l -print | awk '{print $0}')
    while read file; do
      if [ -L "$file" ]; then
        echo "File: $file"
        unlink "$file"
        echo ""
      fi
    done <<< "$output"
  fi
}

## Webserver

webserver() {
  case $1 in
    "start")
      mysql.server start
      sudo apachectl start ;;
    "stop")
      mysql.server stop
      sudo apachectl -k stop ;;
    "restart")
      mysql.server restart
      sudo apachectl -k restart ;;
    "config")
      sudo subl /usr/local/etc/httpd/httpd.conf ;;
    "error_log")
      tail -f /usr/local/var/log/httpd/error_log ;;
    "access_log")
      tail -f /usr/local/var/log/httpd/access_log ;;
    "vhosts")
      sudo subl /usr/local/etc/httpd/extra/httpd-vhosts.conf /etc/hosts ;;
    *)
      echo "usage: webserver start | stop | restart | config | vhosts | error_log | access_log" ;;
  esac
}

webdatabase() {
  case $1 in
    "start")
      mysql.server start ;;
    "stop")
      mysql.server stop ;;
    *)
      echo "usage: webdatabase start | stop";;
  esac
}

function conda_init() {
  # !! Contents within this block were generated by 'conda init'
  __conda_setup="$(CONDA_REPORT_ERRORS=false '/Users/tomik/anaconda3/bin/conda' shell.bash hook 2> /dev/null)"
  if [ $? -eq 0 ]; then
      \eval "$__conda_setup"
  else
      if [ -f "/Users/tomik/anaconda3/etc/profile.d/conda.sh" ]; then
          . "/Users/tomik/anaconda3/etc/profile.d/conda.sh"
          CONDA_CHANGEPS1=false conda activate base
      else
          \export PATH="/Users/tomik/anaconda3/bin:$PATH"
      fi
  fi
  unset __conda_setup
  # <<< conda init <<<
}

## Dotfiles

dotfiles() {
  case $1 in
    "backup")
      cd $DOTFILES
      ./dotfiles.sh backup
      ;;
    "bootstrap")
      cd $DOTFILES
      ./dotfiles.sh bootstrap
      ;;
    *)
      echo "usage: dotfiles backup | bootstrap"
      ;;
  esac
}
