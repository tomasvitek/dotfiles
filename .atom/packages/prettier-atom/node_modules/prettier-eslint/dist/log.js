'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _loglevel = require('loglevel');

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var logger = void 0;

exports.default = setupLogger;


function setupLogger() {
  var level = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'WARN';

  if (logger) {
    return logger;
  }
  var prefix = _chalk2.default.dim('prettier-eslint');
  var levelPrefix = {
    TRACE: _chalk2.default.dim('[TRACE]'),
    DEBUG: _chalk2.default.cyan('[DEBUG]'),
    INFO: _chalk2.default.blue('[INFO]'),
    WARN: _chalk2.default.yellow('[WARN]'),
    ERROR: _chalk2.default.red('[ERROR]')
  };

  logger = (0, _loglevel.getLogger)('prettier-eslint-logger');

  // this is the plugin "api"
  var originalFactory = logger.methodFactory;
  logger.methodFactory = methodFactory;

  var originalSetLevel = logger.setLevel;
  logger.setLevel = setLevel;
  logger.setLevel(level);
  return logger;

  // this is the plugin "api"
  function methodFactory() {
    for (var _len = arguments.length, factoryArgs = Array(_len), _key = 0; _key < _len; _key++) {
      factoryArgs[_key] = arguments[_key];
    }

    var logLevel = factoryArgs[0];

    var rawMethod = originalFactory.apply(undefined, factoryArgs);
    return function () {
      for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      return rawMethod.apply(undefined, [prefix + ' ' + levelPrefix[logLevel.toUpperCase()] + ':'].concat(args));
    };
  }

  function setLevel(levelToSetTo) {
    var persist = false; // uses browser localStorage
    return originalSetLevel.call(logger, levelToSetTo, persist);
  }
}