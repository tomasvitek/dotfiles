{"version":3,"file":"abbreviation.es.js","sources":["../lib/repeat.js","../lib/quoted.js","../lib/text.js","../lib/attribute.js","../lib/element.js","../lib/parser.js","../index.js"],"sourcesContent":["'use strict';\n\nimport { isNumber } from '@emmetio/stream-reader-utils';\n\nconst ASTERISK = 42; // *\n\n/**\n * Consumes node repeat token from current stream position and returns its\n * parsed value\n * @param  {StringReader} stream\n * @return {Object}\n */\nexport default function(stream) {\n\tif (stream.eat(ASTERISK)) {\n\t\tstream.start = stream.pos;\n\n\t\t// XXX think about extending repeat syntax with through numbering\n\t\treturn { count: stream.eatWhile(isNumber) ? +stream.current() : null };\n\t}\n}\n","'use strict';\n\nimport { eatQuoted } from '@emmetio/stream-reader-utils';\n\nconst opt = { throws: true };\n\n/**\n * Consumes quoted literal from current stream position and returns it’s inner,\n * unquoted, value\n * @param  {StringReader} stream\n * @return {String} Returns `null` if unable to consume quoted value from current\n * position\n */\nexport default function(stream) {\n\tif (eatQuoted(stream, opt)) {\n\t\treturn stream.current().slice(1, -1);\n\t}\n}\n","'use strict';\n\nconst TEXT_START = 123; // {\nconst TEXT_END = 125; // }\nconst ESCAPE =  92; // \\ character\n\n/**\n * Consumes text node `{...}` from stream\n * @param  {StreamReader} stream\n * @return {String} Returns consumed text value (without surrounding braces) or\n * `null` if there’s no text at starting position\n */\nexport default function consumeText(stream) {\n\t// NB using own implementation instead of `eatPair()` from @emmetio/stream-reader-utils\n\t// to disable quoted value consuming\n\tconst start = stream.pos;\n\n\tif (stream.eat(TEXT_START)) {\n\t\tlet stack = 1, ch;\n\t\tlet result = '';\n\t\tlet offset = stream.pos;\n\n\t\twhile (!stream.eof()) {\n\t\t\tch = stream.next();\n\t\t\tif (ch === TEXT_START) {\n\t\t\t\tstack++;\n\t\t\t} else if (ch === TEXT_END) {\n\t\t\t\tstack--;\n\t\t\t\tif (!stack) {\n\t\t\t\t\tstream.start = start;\n\t\t\t\t\treturn result + stream.substring(offset, stream.pos - 1);\n\t\t\t\t}\n\t\t\t} else if (ch === ESCAPE) {\n\t\t\t\tch = stream.next();\n\t\t\t\tif (ch === TEXT_START || ch === TEXT_END) {\n\t\t\t\t\tresult += stream.substring(offset, stream.pos - 2) + String.fromCharCode(ch);\n\t\t\t\t\toffset = stream.pos;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// If we’re here then paired character can’t be consumed\n\t\tstream.pos = start;\n\t\tthrow stream.error(`Unable to find closing ${String.fromCharCode(TEXT_END)} for text start`);\n\t}\n\n\treturn null;\n}\n","'use strict';\n\nimport { isWhiteSpace, isSpace, isQuote, isAlphaNumeric } from '@emmetio/stream-reader-utils';\nimport consumeQuoted from './quoted';\nimport consumeTextNode from './text';\n\nconst EXCL       = 33; // .\nconst DOT        = 46; // .\nconst EQUALS     = 61; // =\nconst ATTR_OPEN  = 91; // [\nconst ATTR_CLOSE = 93; // ]\n\nconst reAttributeName = /^\\!?[\\w\\-:\\$@]+\\.?$/;\n\n/**\n * Consumes attributes defined in square braces from given stream.\n * Example:\n * [attr col=3 title=\"Quoted string\" selected. support={react}]\n * @param {StringReader} stream\n * @returns {Array} Array of consumed attributes\n */\nexport default function(stream) {\n\tif (!stream.eat(ATTR_OPEN)) {\n\t\treturn null;\n\t}\n\n\tconst result = [];\n\tlet token, attr;\n\n\twhile (!stream.eof()) {\n\t\tstream.eatWhile(isWhiteSpace);\n\n\t\tif (stream.eat(ATTR_CLOSE)) {\n\t\t\treturn result; // End of attribute set\n\t\t} else if ((token = consumeQuoted(stream)) != null) {\n\t\t\t// Consumed quoted value: anonymous attribute\n\t\t\tresult.push({\n\t\t\t\tname: null,\n\t\t\t\tvalue: token\n\t\t\t});\n\t\t} else if (eatUnquoted(stream)) {\n\t\t\t// Consumed next word: could be either attribute name or unquoted default value\n\t\t\ttoken = stream.current();\n\t\t\tif (!reAttributeName.test(token)) {\n\t\t\t\t// anonymous attribute\n\t\t\t\tresult.push({ name: null, value: token });\n\t\t\t} else {\n\t\t\t\t// Looks like a regular attribute\n\t\t\t\tattr = parseAttributeName(token);\n\t\t\t\tresult.push(attr);\n\n\t\t\t\tif (stream.eat(EQUALS)) {\n\t\t\t\t\t// Explicitly defined value. Could be a word, a quoted string\n\t\t\t\t\t// or React-like expression\n\t\t\t\t\tif ((token = consumeQuoted(stream)) != null) {\n\t\t\t\t\t\tattr.value = token;\n\t\t\t\t\t} else if ((token = consumeTextNode(stream)) != null) {\n\t\t\t\t\t\tattr.value = token;\n\t\t\t\t\t\tattr.options = {\n\t\t\t\t\t\t\tbefore: '{',\n\t\t\t\t\t\t\tafter: '}'\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (eatUnquoted(stream)) {\n\t\t\t\t\t\tattr.value = stream.current();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tthrow stream.error('Expected attribute name');\n\t\t}\n\t}\n\n\tthrow stream.error('Expected closing \"]\" brace');\n}\n\nfunction parseAttributeName(name) {\n\tconst options = {};\n\n\t// If a first character in attribute name is `!` — it’s an implied\n\t// default attribute\n\tif (name.charCodeAt(0) === EXCL) {\n\t\tname = name.slice(1);\n\t\toptions.implied = true;\n\t}\n\n\t// Check for last character: if it’s a `.`, user wants boolean attribute\n\tif (name.charCodeAt(name.length - 1) === DOT) {\n\t\tname = name.slice(0, name.length - 1);\n\t\toptions.boolean = true;\n\t}\n\n\tconst attr = { name };\n\tif (Object.keys(options).length) {\n\t\tattr.options = options;\n\t}\n\n\treturn attr;\n}\n\n/**\n * Eats token that can be an unquoted value from given stream\n * @param  {StreamReader} stream\n * @return {Boolean}\n */\nfunction eatUnquoted(stream) {\n\tconst start = stream.pos;\n\tif (stream.eatWhile(isUnquoted)) {\n\t\tstream.start = start;\n\t\treturn true;\n\t}\n}\n\nfunction isUnquoted(code) {\n\treturn !isSpace(code) && !isQuote(code)\n\t\t&& code !== ATTR_OPEN && code !== ATTR_CLOSE && code !== EQUALS;\n}\n","'use strict';\n\nimport Node from '@emmetio/node';\nimport { isAlphaNumeric } from '@emmetio/stream-reader-utils';\nimport consumeAttributes from './attribute';\nimport consumeTextNode from './text';\nimport consumeRepeat from './repeat';\n\nconst HASH    = 35; // #\nconst DOT     = 46; // .\nconst SLASH   = 47; // /\n\n/**\n * Consumes a single element node from current abbreviation stream\n * @param  {StringReader} stream\n * @return {Node}\n */\nexport default function(stream) {\n\t// consume element name, if provided\n\tconst start = stream.pos;\n\tconst node = new Node(eatName(stream));\n\tlet next;\n\n\twhile (!stream.eof()) {\n\t\tif (stream.eat(DOT)) {\n\t\t\tnode.addClass(eatName(stream));\n\t\t} else if (stream.eat(HASH)) {\n\t\t\tnode.setAttribute('id', eatName(stream));\n\t\t} else if (stream.eat(SLASH)) {\n\t\t\t// A self-closing indicator must be at the end of non-grouping node\n\t\t\tif (node.isGroup) {\n\t\t\t\tstream.backUp(1);\n\t\t\t\tthrow stream.error('Unexpected self-closing indicator');\n\t\t\t}\n\t\t\tnode.selfClosing = true;\n\t\t\tif (next = consumeRepeat(stream)) {\n\t\t\t\tnode.repeat = next;\n\t\t\t}\n\t\t\tbreak;\n\t\t} else if (next = consumeAttributes(stream)) {\n\t\t\tfor (let i = 0, il = next.length; i < il; i++) {\n\t\t\t\tnode.setAttribute(next[i]);\n\t\t\t}\n\t\t} else if ((next = consumeTextNode(stream)) !== null) {\n\t\t\tnode.value = next;\n\t\t} else if (next = consumeRepeat(stream)) {\n\t\t\tnode.repeat = next;\n\t\t} else {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tif (start === stream.pos) {\n\t\tthrow stream.error(`Unable to consume abbreviation node, unexpected ${stream.peek()}`);\n\t}\n\n\treturn node;\n}\n\nfunction eatName(stream) {\n\tstream.start = stream.pos;\n\tstream.eatWhile(isName);\n\treturn stream.current();\n}\n\nfunction isName(code) {\n\treturn isAlphaNumeric(code)\n\t\t|| code === 45 /* - */\n\t\t|| code === 58 /* : */\n\t\t|| code === 36 /* $ */\n\t\t|| code === 64 /* @ */\n\t\t|| code === 33 /* ! */\n\t\t|| code === 95 /* _ */\n\t\t|| code === 37 /* % */;\n}\n","'use strict';\n\nimport Node from '@emmetio/node';\nimport StreamReader from '@emmetio/stream-reader';\nimport consumeRepeat from './repeat';\nimport consumeElement from './element';\n\nconst GROUP_START = 40; // (\nconst GROUP_END   = 41; // )\nconst OP_SIBLING  = 43; // +\nconst OP_CHILD    = 62; // >\nconst OP_CLIMB    = 94; // ^\n\n/**\n * Parses given string into a node tree\n * @param  {String} str Abbreviation to parse\n * @return {Node}\n */\nexport default function parse(str) {\n\tconst stream = new StreamReader(str.trim());\n\tconst root = new Node();\n\tlet ctx = root, groupStack = [], ch;\n\n\twhile (!stream.eof()) {\n\t\tch = stream.peek();\n\n\t\tif (ch === GROUP_START) { // start of group\n\t\t\t// The grouping node should be detached to properly handle\n\t\t\t// out-of-bounds `^` operator. Node will be attached right on group end\n\t\t\tconst node = new Node();\n\t\t\tgroupStack.push([node, ctx, stream.pos]);\n\t\t\tctx = node;\n\t\t\tstream.next();\n\t\t\tcontinue;\n\t\t} else if (ch === GROUP_END) { // end of group\n\t\t\tconst lastGroup = groupStack.pop();\n\t\t\tif (!lastGroup) {\n\t\t\t\tthrow stream.error('Unexpected \")\" group end');\n\t\t\t}\n\n\t\t\tconst node = lastGroup[0];\n\t\t\tctx = lastGroup[1];\n\t\t\tstream.next();\n\n\t\t\t// a group can have a repeater\n\t\t\tif (node.repeat = consumeRepeat(stream)) {\n\t\t\t\tctx.appendChild(node);\n\t\t\t} else {\n\t\t\t\t// move all children of group into parent node\n\t\t\t\twhile (node.firstChild) {\n\t\t\t\t\tctx.appendChild(node.firstChild);\n\t\t\t\t}\n\t\t\t}\n\t\t\t// for convenience, groups can be joined with optional `+` operator\n\t\t\tstream.eat(OP_SIBLING);\n\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst node = consumeElement(stream);\n\t\tctx.appendChild(node);\n\n\t\tif (stream.eof()) {\n\t\t\tbreak;\n\t\t}\n\n\t\tswitch (stream.peek()) {\n\t\t\tcase OP_SIBLING:\n\t\t\t\tstream.next();\n\t\t\t\tcontinue;\n\n\t\t\tcase OP_CHILD:\n\t\t\t\tstream.next();\n\t\t\t\tctx = node;\n\t\t\t\tcontinue;\n\n\t\t\tcase OP_CLIMB:\n\t\t\t\t// it’s perfectly valid to have multiple `^` operators\n\t\t\t\twhile (stream.eat(OP_CLIMB)) {\n\t\t\t\t\tctx = ctx.parent || ctx;\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t}\n\t}\n\n\tif (groupStack.length) {\n\t\tstream.pos = groupStack.pop()[2];\n\t\tthrow stream.error('Expected group close');\n\t}\n\n\treturn root;\n}\n\nfunction last(arr) {\n\treturn arr[arr.length - 1];\n}\n","'use strict';\n\nimport parse from './lib/parser';\n\n/**\n * Parses given abbreviation and un-rolls it into a full tree: recursively\n * replaces repeated elements with actual nodes\n * @param  {String} abbr\n * @return {Node}\n */\nexport default function(abbr) {\n\tconst tree = parse(abbr);\n\ttree.walk(unroll);\n\treturn tree;\n}\n\nfunction unroll(node) {\n\tif (!node.repeat || !node.repeat.count) {\n\t\treturn;\n\t}\n\n\tconst parent = node.parent;\n\tlet ix = parent.children.indexOf(node);\n\n\tfor (let i = 0; i < node.repeat.count; i++) {\n\t\tconst clone = node.clone(true);\n\t\tclone.repeat.value = i + 1;\n\t\tclone.walk(unroll);\n\n\t\tif (clone.isGroup) {\n\t\t\twhile (clone.children.length > 0) {\n\t\t\t\tclone.firstChild.repeat = clone.repeat;\n\t\t\t\tparent.insertAt(clone.firstChild, ix++);\n\t\t\t}\n\t\t} else {\n\t\t\tparent.insertAt(clone, ix++);\n\t\t}\n\t}\n\n\tnode.parent.removeChild(node);\n}\n"],"names":["consumeTextNode","DOT"],"mappings":"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"}