{"version":3,"file":"field-parser.es.js","sources":["../index.js"],"sourcesContent":["'use strict';\n\nimport StreamReader from '@emmetio/stream-reader';\nimport { isNumber } from '@emmetio/stream-reader-utils';\n\nconst DOLLAR      = 36;  // $\nconst COLON       = 58;  // :\nconst ESCAPE      = 92;  // \\\nconst OPEN_BRACE  = 123; // {\nconst CLOSE_BRACE = 125; // }\n\n/**\n * Finds fields in given string and returns object with field-less string\n * and array of fields found\n * @param  {String} string\n * @return {Object}\n */\nexport default function parse(string) {\n\tconst stream = new StreamReader(string);\n\tconst fields = [];\n\tlet cleanString = '', offset = 0, pos = 0;\n\tlet code, field;\n\n\twhile (!stream.eof()) {\n\t\tcode = stream.peek();\n\t\tpos = stream.pos;\n\n\t\tif (code === ESCAPE) {\n\t\t\tstream.next();\n\t\t\tstream.next();\n\t\t} else if (field = consumeField(stream, cleanString.length + pos - offset)) {\n\t\t\tfields.push(field);\n\t\t\tcleanString += stream.string.slice(offset, pos) + field.placeholder;\n\t\t\toffset = stream.pos;\n\t\t} else {\n\t\t\tstream.next();\n\t\t}\n\t}\n\n\treturn new FieldString(cleanString + stream.string.slice(offset), fields);\n}\n\n/**\n * Marks given `string` with `fields`: wraps each field range with\n * `${index:placeholder}` (by default) or any other token produced by `token`\n * function, if provided\n * @param  {String} string String to mark\n * @param  {Array} fields Array of field descriptor. A field descriptor is a\n * `{index, location, length}` array. It is important that fields in array\n * must be ordered by their location in string: some fields my refer the same\n * location so they must appear in order that user expects.\n * @param  {Function} [token] Function that generates field token. This function\n * received two arguments: `index` and `placeholder` and should return string\n * @return {String}  String with marked fields\n */\nexport function mark(string, fields, token) {\n\ttoken = token || createToken;\n\n\t// order fields by their location and appearence\n\t// NB field ranges should not overlap! (not supported yet)\n\tconst ordered = fields\n\t.map((field, order) => ({order, field, end: field.location + field.length}))\n\t.sort((a, b) => (a.end - b.end) || (a.order - b.order));\n\n\t// mark ranges in string\n\tlet offset = 0;\n\tconst result = ordered.map(item => {\n\t\tconst placeholder = string.substr(item.field.location, item.field.length);\n\t\tconst prefix = string.slice(offset, item.field.location);\n\t\toffset = item.end;\n\t\treturn prefix + token(item.field.index, placeholder);\n\t});\n\n\treturn result.join('') + string.slice(offset);\n}\n\n/**\n * Creates field token for string\n * @param  {Number} index       Field index\n * @param  {String} placeholder Field placeholder, could be empty string\n * @return {String}\n */\nexport function createToken(index, placeholder) {\n\treturn placeholder ? `\\${${index}:${placeholder}}` : `\\${${index}}`;\n}\n\n/**\n * Consumes field from current stream position: it can be an `$index` or\n * or `${index}` or `${index:placeholder}`\n * @param  {StreamReader} stream\n * @param  {Number}       location Field location in *clean* string\n * @return {Field} Object with `index` and `placeholder` properties if\n * field was successfully consumed, `null` otherwise\n */\nfunction consumeField(stream, location) {\n\tconst start = stream.pos;\n\n\tif (stream.eat(DOLLAR)) {\n\t\t// Possible start of field\n\t\tlet index = consumeIndex(stream);\n\t\tlet placeholder = '';\n\n\t\t// consumed $index placeholder\n\t\tif (index != null) {\n\t\t\treturn new Field(index, placeholder, location);\n\t\t}\n\n\t\tif (stream.eat(OPEN_BRACE)) {\n\t\t\tindex = consumeIndex(stream);\n\t\t\tif (index != null) {\n\t\t\t\tif (stream.eat(COLON)) {\n\t\t\t\t\tplaceholder = consumePlaceholder(stream);\n\t\t\t\t}\n\n\t\t\t\tif (stream.eat(CLOSE_BRACE)) {\n\t\t\t\t\treturn new Field(index, placeholder, location);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// If we reached here then thereâ€™s no valid field here, revert\n\t// back to starting position\n\tstream.pos = start;\n}\n\n/**\n * Consumes a placeholder: value right after `:` in field. Could be empty\n * @param  {StreamReader} stream\n * @return {String}\n */\nfunction consumePlaceholder(stream) {\n\tlet code;\n\tconst stack = [];\n\tstream.start = stream.pos;\n\n\twhile (!stream.eof()) {\n\t\tcode = stream.peek();\n\n\t\tif (code === OPEN_BRACE) {\n\t\t\tstack.push(stream.pos);\n\t\t} else if (code === CLOSE_BRACE) {\n\t\t\tif (!stack.length) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tstack.pop();\n\t\t}\n\t\tstream.next();\n\t}\n\n\tif (stack.length) {\n\t\tthrow stream.error('Unable to find matching \"}\" for curly brace at ' + stack.pop());\n\t}\n\n\treturn stream.current();\n}\n\n/**\n * Consumes integer from current stream position\n * @param  {StreamReader} stream\n * @return {Number}\n */\nfunction consumeIndex(stream) {\n\tstream.start = stream.pos;\n\tif (stream.eatWhile(isNumber)) {\n\t\treturn Number(stream.current());\n\t}\n}\n\nclass Field {\n\tconstructor(index, placeholder, location) {\n\t\tthis.index = index;\n\t\tthis.placeholder = placeholder;\n\t\tthis.location = location;\n\t\tthis.length = this.placeholder.length;\n\t}\n}\n\nclass FieldString {\n\t/**\n\t * @param {String} string\n\t * @param {Field[]} fields\n\t */\n\tconstructor(string, fields) {\n\t\tthis.string = string;\n\t\tthis.fields = fields;\n\t}\n\n\tmark(token) {\n\t\treturn mark(this.string, this.fields, token);\n\t}\n\n\ttoString() {\n\t\treturn this.string;\n\t}\n}\n"],"names":[],"mappings":"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"}