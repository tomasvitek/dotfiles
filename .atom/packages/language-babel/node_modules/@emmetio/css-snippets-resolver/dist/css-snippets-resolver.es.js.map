{"version":3,"file":"css-snippets-resolver.es.js","sources":["../lib/score.js","../lib/snippets.js","../index.js"],"sourcesContent":["'use strict';\n\nconst DASH = 45; // -\n\n/**\n * Calculates fuzzy match score of how close `abbr` matches given `string`.\n * @param  {String} abbr        Abbreviation to score\n * @param  {String} string      String to match\n * @param  {Number} [fuzziness] Fuzzy factor\n * @return {Number}             Match score\n */\nexport default function(abbr, string) {\n\tabbr = abbr.toLowerCase();\n\tstring = string.toLowerCase();\n\n\tif (abbr === string) {\n\t\treturn 1;\n\t}\n\n\t// a string MUST start with the same character as abbreviation\n\tif (!string || abbr.charCodeAt(0) !== string.charCodeAt(0)) {\n\t\treturn 0;\n\t}\n\n\tconst abbrLength = abbr.length;\n\tconst stringLength = string.length;\n\tlet i = 1, j = 1, score = stringLength;\n\tlet ch1, ch2, found, acronym;\n\n\twhile (i < abbrLength) {\n\t\tch1 = abbr.charCodeAt(i);\n\t\tfound = false;\n\t\tacronym = false;\n\n\t\twhile (j < stringLength) {\n\t\t\tch2 = string.charCodeAt(j);\n\n\t\t\tif (ch1 === ch2) {\n\t\t\t\tfound = true;\n\t\t\t\tscore += (stringLength - j) * (acronym ? 2 : 1);\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t// add acronym bonus for exactly next match after unmatched `-`\n\t\t\tacronym = ch2 === DASH;\n\t\t\tj++;\n\t\t}\n\n\t\tif (!found) {\n\t\t\tbreak;\n\t\t}\n\n\t\ti++;\n\t}\n\n\treturn score && score * (i / abbrLength) / sum(stringLength);\n}\n\n/**\n * Calculates sum of first `n` natural numbers, e.g. 1+2+3+...n\n * @param  {Number} n\n * @return {Number}\n */\nfunction sum(n) {\n\treturn n * (n + 1) / 2;\n}\n","'use strict';\n\nconst reProperty = /^([a-z\\-]+)(?:\\s*:\\s*([^\\n\\r]+))?$/;\nconst DASH = 45; // -\n\n/**\n * Creates a special structure for resolving CSS properties from plain CSS\n * snippets.\n * Almost all CSS snippets are aliases for real CSS properties with available\n * value variants, optionally separated by `|`. Most values are keywords that\n * can be fuzzy-resolved as well. Some CSS properties are shorthands for other,\n * more specific properties, like `border` and `border-style`. For such cases\n * keywords from more specific properties should be available in shorthands too.\n * @param {Snippet[]} snippets\n * @return {CSSSnippet[]}\n */\nexport default function(snippets) {\n\treturn nest( snippets.map(snippet => new CSSSnippet(snippet.key, snippet.value)) );\n}\n\nexport class CSSSnippet {\n\tconstructor(key, value) {\n\t\tthis.key = key;\n\t\tthis.value = value;\n\t\tthis.property = null;\n\n\t\t// detect if given snippet is a property\n\t\tconst m = value && value.match(reProperty);\n\t\tif (m) {\n\t\t\tthis.property = m[1];\n\t\t\tthis.value = m[2];\n\t\t}\n\n\t\tthis.dependencies = [];\n\t}\n\n\taddDependency(dep) {\n\t\tthis.dependencies.push(dep);\n\t}\n\n\tget defaultValue() {\n\t\treturn this.value != null ? splitValue(this.value)[0] : null;\n\t}\n\n\t/**\n     * Returns list of unique keywords for current CSS snippet and its dependencies\n     * @return {String[]}\n     */\n\tkeywords() {\n\t\tconst stack = [];\n\t\tconst keywords = new Set();\n\t\tlet i = 0, item, candidates;\n\n\t\tif (this.property) {\n\t\t\t// scan valid CSS-properties only\n\t\t\tstack.push(this);\n\t\t}\n\n\t\twhile (i < stack.length) {\n\t\t\t// NB Keep items in stack instead of push/pop to avoid possible\n\t\t\t// circular references\n\t\t\titem = stack[i++];\n\n\t\t\tif (item.value) {\n\t\t\t\tcandidates = splitValue(item.value).filter(isKeyword);\n\n\t\t\t\t// extract possible keywords from snippet value\n\t\t\t\tfor (let j = 0; j < candidates.length; j++) {\n\t\t\t\t\tkeywords.add(candidates[j].trim());\n\t\t\t\t}\n\n\t\t\t\t// add dependencies into scan stack\n\t\t\t\tfor (let j = 0, deps = item.dependencies; j < deps.length; j++) {\n\t\t\t\t\tif (stack.indexOf(deps[j]) === -1) {\n\t\t\t\t\t\tstack.push(deps[j]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn Array.from(keywords);\n\t}\n}\n\n/**\n * Nests more specific CSS properties into shorthand ones, e.g.\n * background-position-x -> background-position -> background\n * @param  {CSSSnippet[]} snippets\n * @return {CSSSnippet[]}\n */\nfunction nest(snippets) {\n\tsnippets = snippets.sort(snippetsSort);\n\tconst stack = [];\n\n\t// For sorted list of CSS properties, create dependency graph where each\n\t// shorthand property contains its more specific one, e.g.\n\t// backgound -> background-position -> background-position-x\n\tfor (let i = 0, cur, prev; i < snippets.length; i++) {\n\t\tcur = snippets[i];\n\n\t\tif (!cur.property) {\n\t\t\t// not a CSS property, skip it\n\t\t\tcontinue;\n\t\t}\n\n\t\t// Check if current property belongs to one from parent stack.\n\t\t// Since `snippets` array is sorted, items are perfectly aligned\n\t\t// from shorthands to more specific variants\n\t\twhile (stack.length) {\n\t\t\tprev = stack[stack.length - 1];\n\n\t\t\tif (cur.property.indexOf(prev.property) === 0\n                && cur.property.charCodeAt(prev.property.length) === DASH) {\n\t\t\t\tprev.addDependency(cur);\n\t\t\t\tstack.push(cur);\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tstack.pop();\n\t\t}\n\n\t\tif (!stack.length) {\n\t\t\tstack.push(cur);\n\t\t}\n\t}\n\n\treturn snippets;\n}\n\n/**\n * A sorting function for array of snippets\n * @param  {CSSSnippet} a\n * @param  {CSSSnippet} b\n * @return {Number}\n */\nfunction snippetsSort(a, b) {\n\tif (a.key === b.key) {\n\t\treturn 0;\n\t}\n\n\treturn a.key < b.key ? -1 : 1;\n}\n\n/**\n * Check if given string is a keyword candidate\n * @param  {String}  str\n * @return {Boolean}\n */\nfunction isKeyword(str) {\n\treturn /^\\s*[\\w-]+/.test(str);\n}\n\nfunction splitValue(value) {\n\treturn String(value).split('|');\n}\n","'use strict';\n\nimport stringScore from './lib/score';\nimport cssSnippets from './lib/snippets';\n\nconst globalKeywords = ['auto', 'inherit', 'unset'];\nconst unitlessProperties = [\n\t'z-index', 'line-height', 'opacity', 'font-weight', 'zoom',\n\t'flex', 'flex-grow', 'flex-shrink'\n];\n\nconst defaultOptions = {\n\tintUnit: 'px',\n\tfloatUnit: 'em',\n\tunitAliases: {\n\t\te :'em',\n\t\tp: '%',\n\t\tx: 'ex',\n\t\tr: 'rem'\n\t},\n\tfuzzySearchMinScore: 0\n};\n\n/**\n * For every node in given `tree`, finds matching snippet from `registry` and\n * updates node with snippet data.\n *\n * This resolver uses fuzzy matching for searching matched snippets and their\n * keyword values.\n */\n\nexport default function(tree, registry, options) {\n\toptions = Object.assign({}, defaultOptions, options);\n\toptions.unitAliases = Object.assign({}, defaultOptions.unitAliases, options && options.unitAliases);\n\n\tconst snippets = convertToCSSSnippets(registry);\n\n\ttree.walk(node => resolveNode(node, snippets, options));\n\treturn tree;\n}\n\nexport function convertToCSSSnippets(registry) {\n\treturn cssSnippets(registry.all({type: 'string'}));\n}\n\nexport { stringScore, cssSnippets };\n\n/**\n * Resolves given node: finds matched CSS snippets using fuzzy match and resolves\n * keyword aliases from node value\n * @param  {Node} node\n * @param  {CSSSnippet[]} snippets\n * @param  {Object} options\n * @return {Node}\n */\nfunction resolveNode(node, snippets, options) {\n\tconst snippet = findBestMatch(node.name, snippets, 'key', options.fuzzySearchMinScore);\n\n\tif (!snippet) {\n\t\t// Edge case: `!important` snippet\n\t\treturn node.name === '!' ? setNodeAsText(node, '!important') : node;\n\t}\n\n\treturn snippet.property\n\t\t? resolveAsProperty(node, snippet, options)\n\t\t: resolveAsSnippet(node, snippet);\n}\n\n/**\n * Resolves given parsed abbreviation node as CSS property\n * @param {Node} node\n * @param {CSSSnippet} snippet\n * @param  {Object} formatOptions\n * @return {Node}\n */\nfunction resolveAsProperty(node, snippet, formatOptions) {\n\tconst abbr = node.name;\n\tnode.name = snippet.property;\n\n\tif (node.value && typeof node.value === 'object') {\n\t\t// resolve keyword shortcuts\n\t\tconst keywords = snippet.keywords();\n\n\t\tif (!node.value.size) {\n\t\t\t// no value defined, try to resolve unmatched part as a keyword alias\n\t\t\tlet kw = findBestMatch(getUnmatchedPart(abbr, snippet.key), keywords);\n\n\t\t\tif (!kw) {\n\t\t\t\t// no matching value, try to get default one\n\t\t\t\tkw = snippet.defaultValue;\n\t\t\t\tif (kw && kw.indexOf('${') === -1) {\n\t\t\t\t\t// Quick and dirty test for existing field. If not, wrap\n\t\t\t\t\t// default value in a field\n\t\t\t\t\tkw = `\\${1:${kw}}`;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (kw) {\n\t\t\t\tnode.value.add(kw);\n\t\t\t}\n\t\t} else {\n\t\t\t// replace keyword aliases in current node value\n\t\t\tfor (let i = 0, token; i < node.value.value.length; i++) {\n\t\t\t\ttoken = node.value.value[i];\n\n\t\t\t\tif (token === '!') {\n\t\t\t\t\ttoken = `${!i ? '${1} ' : ''}!important`;\n\t\t\t\t} else if (isKeyword(token)) {\n\t\t\t\t\ttoken = findBestMatch(token.value, keywords)\n\t\t\t\t\t\t|| findBestMatch(token.value, globalKeywords)\n\t\t\t\t\t\t|| token;\n\t\t\t\t} else if (isNumericValue(token)) {\n\t\t\t\t\ttoken = resolveNumericValue(node.name, token, formatOptions);\n\t\t\t\t}\n\n\t\t\t\tnode.value.value[i] = token;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn node;\n}\n\n/**\n * Resolves given parsed abbreviation node as a snippet: a plain code chunk\n * @param {Node} node\n * @param {CSSSnippet} snippet\n * @return {Node}\n */\nfunction resolveAsSnippet(node, snippet) {\n\treturn setNodeAsText(node, snippet.value);\n}\n\n/**\n * Sets given parsed abbreviation node as a text snippet\n * @param {Node} node\n * @param {String} text\n * @return {Node}\n */\nfunction setNodeAsText(node, text) {\n\tnode.name = null;\n\tnode.value = text;\n\treturn node;\n}\n\n/**\n * Finds best matching item from `items` array\n * @param {String} abbr  Abbreviation to match\n * @param {Array}  items List of items for match\n * @param {String} [key] If `items` is a list of objects, use `key` as object\n * property to test against\n * @param {Number} fuzzySearchMinScore The minimum score the best matched item should have to be a valid match.\n * @return {*}\n */\nfunction findBestMatch(abbr, items, key, fuzzySearchMinScore) {\n\tif (!abbr) {\n\t\treturn null;\n\t}\n\n\tlet matchedItem = null;\n\tlet maxScore = 0;\n\tfuzzySearchMinScore = fuzzySearchMinScore || 0;\n\n\tfor (let i = 0, item; i < items.length; i++) {\n\t\titem = items[i];\n\t\tconst score = stringScore(abbr, getScoringPart(item, key));\n\n\t\tif (score === 1) {\n\t\t\t// direct hit, no need to look further\n\t\t\treturn item;\n\t\t}\n\n\t\tif (score && score >= maxScore) {\n\t\t\tmaxScore = score;\n\t\t\tmatchedItem = item;\n\t\t}\n\t}\n\n\treturn maxScore >= fuzzySearchMinScore ? matchedItem : null;\n}\n\nfunction getScoringPart(item, key) {\n\tconst value = item && typeof item === 'object' ? item[key] : item;\n\tconst m = (value || '').match(/^[\\w-@]+/);\n\treturn m ? m[0] : value;\n}\n\n/**\n * Returns a part of `abbr` that wasn’t directly matched agains `string`.\n * For example, if abbreviation `poas` is matched against `position`, the unmatched part will be `as`\n * since `a` wasn’t found in string stream\n * @param {String} abbr\n * @param {String} string\n * @return {String}\n */\nfunction getUnmatchedPart(abbr, string) {\n\tfor (let i = 0, lastPos = 0; i < abbr.length; i++) {\n\t\tlastPos = string.indexOf(abbr[i], lastPos);\n\t\tif (lastPos === -1) {\n\t\t\treturn abbr.slice(i);\n\t\t}\n\t\tlastPos++;\n\t}\n\n\treturn '';\n}\n\n/**\n * Check if given CSS value token is a keyword\n * @param {*} token\n * @return {Boolean}\n */\nfunction isKeyword(token) {\n\treturn tokenTypeOf(token, 'keyword');\n}\n\n/**\n * Check if given CSS value token is a numeric value\n * @param  {*}  token\n * @return {Boolean}\n */\nfunction isNumericValue(token) {\n\treturn tokenTypeOf(token, 'numeric');\n}\n\nfunction tokenTypeOf(token, type) {\n\treturn token && typeof token === 'object' && token.type === type;\n}\n\n/**\n * Resolves numeric value for given CSS property\n * @param  {String} property    CSS property name\n * @param  {NumericValue} token CSS numeric value token\n * @param  {Object} formatOptions Formatting options for units\n * @return {NumericValue}\n */\nfunction resolveNumericValue(property, token, formatOptions) {\n\tif (token.unit) {\n\t\ttoken.unit = formatOptions.unitAliases[token.unit] || token.unit;\n\t} else if (token.value !== 0 && unitlessProperties.indexOf(property) === -1) {\n\t\t// use `px` for integers, `em` for floats\n\t\t// NB: num|0 is a quick alternative to Math.round(0)\n\t\ttoken.unit = token.value === (token.value|0) ? formatOptions.intUnit : formatOptions.floatUnit;\n\t}\n\n\treturn token;\n}\n"],"names":["DASH","isKeyword"],"mappings":"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"}