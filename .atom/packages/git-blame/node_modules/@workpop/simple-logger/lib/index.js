'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Logger;

var _lodash = require('lodash');

var _moment = require('moment');

var _moment2 = _interopRequireDefault(_moment);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var logLevels = {
  TRACE: 'TRACE',
  INFO: 'INFO',
  WARN: 'WARN',
  ERROR: 'ERROR'
};

var IS_ENABLED = true;

function _log(category, level) {
  var _console2;

  if (!IS_ENABLED) {
    return;
  }

  var now = (0, _moment2.default)().format();

  for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
    args[_key - 2] = arguments[_key];
  }

  if (level === logLevels.ERROR) {
    var _console;

    return (_console = console).error.apply(_console, [now + ' ' + level + ' [' + category + ']'].concat(args)); // eslint-disable-line no-console
  }

  return (_console2 = console).log.apply(_console2, [now + ' ' + level + ' [' + category + ']'].concat(args)); // eslint-disable-line no-console
}

function Logger(category, requestId) {
  this.category = category;
  this.requestId = requestId;
}

Logger.disable = function () {
  IS_ENABLED = false;
};

Logger.enable = function () {
  IS_ENABLED = true;
};

function createLogLevel(level) {
  return function logWithLevel() {
    for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }

    if (this.requestId) {
      _log.apply(undefined, [this.category, level, 'RequestId: ' + this.requestId].concat(args));
      return;
    }
    _log.apply(undefined, [this.category, level].concat(args));
  };
}

Logger.prototype.trace = createLogLevel(logLevels.TRACE);

Logger.prototype.info = createLogLevel(logLevels.INFO);

Logger.prototype.warn = createLogLevel(logLevels.WARN);

Logger.prototype.error = createLogLevel(logLevels.ERROR);

Logger.prototype.log = function log(level) {
  for (var _len3 = arguments.length, args = Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
    args[_key3 - 1] = arguments[_key3];
  }

  if ((0, _lodash.size)(args) === 1 && (0, _lodash.isObject)(args[0])) {
    _log(this.category, (0, _lodash.toUpper)(level), JSON.stringify(args[0]));
    return;
  }

  _log.apply(undefined, [this.category, (0, _lodash.toUpper)(level)].concat(args));
};